package com.lami.tuomatuo.mq.zookeeper;

import org.apache.zookeeper.WatchedEvent;

/**
 * This interface specifies the public interface an event handler class must
 * implement. A ZooKeeper client will get various from the ZooKeeper
 * server it connects to. An application using such a client handles these
 * events by registering a callback object with the client. The callback object
 * is expected to be an instance of a class that implements Watcher interface
 *
 * Created by xujiankang on 2017/3/16.
 */
public interface Watcher {

    /**
     * This interface defines the possible states an Event may represent
     */
    public interface Event {

        /**
         * Enumeration of states the Zookeeper may be at the event
         */
        public enum KeeperState {
            /** Unused, this state is never generated by the server */
            Unknown(-1),

            /**
             * The client is in the disconnected state - it is not connected
             * to any server in the ensemble
             */
            Disconnected(0),

            /**
             * Unused, this state is never generated by the server
             */
            NoSyncConnected(1),

            /**
             * The client is in the connected state - it is connected
             * to a server in the ensemble ( on of the servers specified
             * in the host connection parameter during ZooKeeper client
             * creation)
             */
            SyncConnected(3),

            /**
             * Auth failed state
             */
            AuthFailed(4),

            /**
             *The client is connected to a read-only server, that is the server which is not currently connected to the majority
             * The only operations allowed after receiving this state is
             * read operation
             * This state is generated for read-only clients only since
             * read/write clients aren't allowed to connected to r/o servers
             */
            ConnectedReadOnly(5),

            /**
             * SaalAuthenticated: used to notify clients that they are SASL-authenticated,
             * so that they can perform ZooKeeper action with their SASL-authorized permissions
             */
            SaalAuthenticated(6),

            /**
             * The serving cluster has expired this session. The ZooKeeper
             * client connection (the session) is no longer vaid. You must
             * create a new Client connection (instantiate a new ZooKeeper
             * instance) if you with access the ensemble
             */
            Expired(-112);

            private final int intValue; // Integer representation of values
                                            // for sending over wire

            KeeperState(int intValue) {
                this.intValue = intValue;
            }

            public int getIntValue() {
                return intValue;
            }

            public static KeeperState fromInt(int intValue){
                switch (intValue){
                    case  -1: return KeeperState.Unknown;
                    case  0: return KeeperState.Disconnected;
                    case  1: return KeeperState.NoSyncConnected;
                    case  3: return KeeperState.SyncConnected;
                    case  4: return KeeperState.AuthFailed;
                    case  5: return KeeperState.ConnectedReadOnly;
                    case  6: return KeeperState.SaalAuthenticated;
                    case  -112: return KeeperState.Expired;

                    default :
                        throw new RuntimeException("Invalid integer value for conversion to KeeperState");
                }
            }
        }



        public enum EventType {

            None(-1),
            NodeCreated(1),
            NodeDeleted(2),
            NodeDataChanged(3),
            NodeChildrenChanged(4),
            DataWatchRemoved(5),
            ChildWatchRemoved(6);

            private final int intValue; // Integer representation of value
                                            // for sending over wire

            EventType(int intValue) {
                this.intValue = intValue;
            }

            public static EventType fromInt(int intValue){
                switch (intValue){
                    case -1: return EventType.None;
                    case 1: return EventType.None;
                    case 2: return EventType.None;
                    case 3: return EventType.None;
                    case 4: return EventType.None;
                    case 5: return EventType.None;
                    case 6: return EventType.None;

                    default :
                        throw new RuntimeException("Invalid integer value for convertion to EventType");
                }
            }
        }
    }


    /**
     * Enumeration of types of watchers
     */
    enum WatcherType {
        Children(1), Data(2), Any(3);

        // Integer representation of value
        private final int intValue;

        WatcherType(int intValue) {
            this.intValue = intValue;
        }

        public int getIntValue() {
            return intValue;
        }

        public static WatcherType fromInt(int intValue){
            switch (intValue){
                case 1:
                    return WatcherType.Children;
                case 2:
                    return WatcherType.Data;
                case 3:
                    return WatcherType.Any;
                default :
                    throw new RuntimeException("Invalid integer value for conversion to WatcherType");
            }
        }
    }

    abstract public void process(WatchedEvent event);
}
