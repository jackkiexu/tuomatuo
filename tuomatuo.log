[2017-01-22 10:39:50,078] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueueTest.java:46) - consumer begin to consumer, but he need sleep
[2017-01-22 10:39:51,091] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueueTest.java:48) - consumer begin to consumer, but he need sleep, and he is OK
[2017-01-22 11:06:04,304] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueueTest.java:46) - consumer begin to consumer, but he need sleep
[2017-01-22 11:06:05,308] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueueTest.java:48) - consumer begin to consumer, but he need sleep, and he is OK
[2017-01-22 11:07:30,176] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueueTest.java:46) - consumer begin to consumer, but he need sleep
[2017-01-22 11:07:31,179] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueueTest.java:48) - consumer begin to consumer, but he need sleep, and he is OK
[2017-01-22 11:09:40,498] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueueTest.java:46) - consumer begin to consumer, but he need sleep
[2017-01-22 11:09:43,129] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueueTest.java:48) - consumer begin to consumer, but he need sleep, and he is OK
[2017-01-22 11:09:45,864] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueue.java:1045) - take happen
[2017-01-22 11:11:22,128] INFO  main (KSynchronousQueue.java:994) - put e0
[2017-01-22 17:37:04,191] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueueTest.java:56) - consumer begin to consumer, but he need sleep
[2017-01-22 17:37:04,191] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueueTest.java:56) - consumer begin to consumer, but he need sleep
[2017-01-22 17:37:04,191] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueueTest.java:56) - consumer begin to consumer, but he need sleep
[2017-01-22 17:37:05,206] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueueTest.java:58) - consumer begin to consumer, but he need sleep, and he is OK
[2017-01-22 17:37:05,206] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:1057) - take happen
[2017-01-22 17:37:05,206] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueueTest.java:58) - consumer begin to consumer, but he need sleep, and he is OK
[2017-01-22 17:37:05,206] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueue.java:1057) - take happen
[2017-01-22 17:37:05,206] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueueTest.java:58) - consumer begin to consumer, but he need sleep, and he is OK
[2017-01-22 17:37:05,206] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueue.java:1057) - take happen
[2017-01-22 17:37:14,191] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:879) - after LockSupport.park(this)
[2017-01-22 17:37:14,191] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueue.java:879) - after LockSupport.park(this)
[2017-01-22 17:37:14,191] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueue.java:879) - after LockSupport.park(this)
[2017-01-22 17:38:03,728] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueueTest.java:56) - consumer begin to consumer, but he need sleep
[2017-01-22 17:38:03,728] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueueTest.java:56) - consumer begin to consumer, but he need sleep
[2017-01-22 17:38:03,728] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueueTest.java:56) - consumer begin to consumer, but he need sleep
[2017-01-22 17:38:04,737] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueueTest.java:58) - consumer begin to consumer, but he need sleep, and he is OK
[2017-01-22 17:38:04,739] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueue.java:1057) - take happen
[2017-01-22 17:38:04,739] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueueTest.java:58) - consumer begin to consumer, but he need sleep, and he is OK
[2017-01-22 17:38:04,739] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:1057) - take happen
[2017-01-22 17:38:04,741] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueueTest.java:58) - consumer begin to consumer, but he need sleep, and he is OK
[2017-01-22 17:38:04,741] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueue.java:1057) - take happen
[2017-01-22 17:38:13,728] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:879) - after LockSupport.park(this)
[2017-01-22 17:38:13,728] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueue.java:879) - after LockSupport.park(this)
[2017-01-22 17:38:13,728] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueue.java:893) - pred:QNode{, waiter=null, isData=false}, s :QNode{, waiter=Thread[SynchronousQueueTest Thread :1,5,main], isData=false}
[2017-01-22 17:38:13,729] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueueTest.java:69) - end
[2017-01-22 17:38:13,728] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueue.java:879) - after LockSupport.park(this)
[2017-01-22 17:38:13,729] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueue.java:893) - pred:QNode{, waiter=Thread[SynchronousQueueTest Thread :2,5,main], isData=false}, s :QNode{, waiter=Thread[SynchronousQueueTest Thread :0,5,main], isData=false}
[2017-01-22 17:38:13,729] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueueTest.java:69) - end
[2017-01-22 17:38:13,728] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:893) - pred:QNode{, waiter=Thread[SynchronousQueueTest Thread :1,5,main], isData=false}, s :QNode{, waiter=Thread[SynchronousQueueTest Thread :2,5,main], isData=false}
[2017-01-22 17:38:13,730] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueueTest.java:69) - end
[2017-01-22 17:40:51,333] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueueTest.java:56) - consumer begin to consumer, but he need sleep
[2017-01-22 17:40:51,336] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueueTest.java:56) - consumer begin to consumer, but he need sleep
[2017-01-22 17:40:51,338] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueueTest.java:56) - consumer begin to consumer, but he need sleep
[2017-01-22 17:40:52,336] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueueTest.java:58) - consumer begin to consumer, but he need sleep, and he is OK
[2017-01-22 17:40:52,336] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueue.java:1059) - take happen
[2017-01-22 17:40:52,338] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueueTest.java:58) - consumer begin to consumer, but he need sleep, and he is OK
[2017-01-22 17:40:52,339] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueue.java:1059) - take happen
[2017-01-22 17:40:52,341] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueueTest.java:58) - consumer begin to consumer, but he need sleep, and he is OK
[2017-01-22 17:40:52,342] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:1059) - take happen
[2017-01-22 17:41:01,333] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueue.java:879) - after LockSupport.park(this)
[2017-01-22 17:41:01,333] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:879) - after LockSupport.park(this)
[2017-01-22 17:41:01,333] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:893) - pred:QNode{, waiter=Thread[SynchronousQueueTest Thread :1,5,main], isData=false}, s :QNode{, waiter=Thread[SynchronousQueueTest Thread :2,5,main], isData=false}
[2017-01-22 17:41:01,333] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueue.java:879) - after LockSupport.park(this)
[2017-01-22 17:41:01,334] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:923) - s != tfalse, s :QNode{, waiter=null, isData=false}, t : QNode{, waiter=null, isData=false}
[2017-01-22 17:41:01,334] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:932) - cleanMe :null
[2017-01-22 17:41:01,333] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueue.java:893) - pred:QNode{, waiter=Thread[SynchronousQueueTest Thread :0,5,main], isData=false}, s :QNode{, waiter=Thread[SynchronousQueueTest Thread :1,5,main], isData=false}
[2017-01-22 17:41:01,334] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueueTest.java:69) - end
[2017-01-22 17:41:01,334] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueueTest.java:69) - end
[2017-01-22 17:41:01,334] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueue.java:893) - pred:QNode{, waiter=null, isData=false}, s :QNode{, waiter=Thread[SynchronousQueueTest Thread :0,5,main], isData=false}
[2017-01-22 17:41:01,335] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueueTest.java:69) - end
[2017-01-22 17:42:20,361] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueueTest.java:56) - consumer begin to consumer, but he need sleep
[2017-01-22 17:42:20,364] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueueTest.java:56) - consumer begin to consumer, but he need sleep
[2017-01-22 17:42:20,364] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueueTest.java:56) - consumer begin to consumer, but he need sleep
[2017-01-22 17:42:21,365] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueueTest.java:58) - consumer begin to consumer, but he need sleep, and he is OK
[2017-01-22 17:42:21,365] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueue.java:1059) - take happen
[2017-01-22 17:42:21,365] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueueTest.java:58) - consumer begin to consumer, but he need sleep, and he is OK
[2017-01-22 17:42:21,366] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:1059) - take happen
[2017-01-22 17:42:21,366] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueueTest.java:58) - consumer begin to consumer, but he need sleep, and he is OK
[2017-01-22 17:42:21,366] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueue.java:1059) - take happen
[2017-01-22 17:42:30,361] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:879) - after LockSupport.park(this)
[2017-01-22 17:42:30,361] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueue.java:879) - after LockSupport.park(this)
[2017-01-22 17:42:30,361] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueue.java:879) - after LockSupport.park(this)
[2017-01-22 17:42:30,361] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueue.java:893) - pred:QNode{, waiter=Thread[SynchronousQueueTest Thread :2,5,main], isData=false}, s :QNode{, waiter=Thread[SynchronousQueueTest Thread :1,5,main], isData=false}, pred.next == s:true
[2017-01-22 17:42:30,361] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:893) - pred:QNode{, waiter=null, isData=false}, s :QNode{, waiter=Thread[SynchronousQueueTest Thread :2,5,main], isData=false}, pred.next == s:true
[2017-01-22 17:42:30,362] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueueTest.java:69) - end
[2017-01-22 17:42:30,361] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueue.java:893) - pred:QNode{, waiter=Thread[SynchronousQueueTest Thread :1,5,main], isData=false}, s :QNode{, waiter=Thread[SynchronousQueueTest Thread :0,5,main], isData=false}, pred.next == s:true
[2017-01-22 17:42:30,362] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueueTest.java:69) - end
[2017-01-22 17:42:30,362] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueueTest.java:69) - end
[2017-01-22 17:44:20,020] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueueTest.java:56) - consumer begin to consumer, but he need sleep
[2017-01-22 17:44:20,029] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueueTest.java:56) - consumer begin to consumer, but he need sleep
[2017-01-22 17:44:20,029] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueueTest.java:56) - consumer begin to consumer, but he need sleep
[2017-01-22 17:44:21,033] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueueTest.java:58) - consumer begin to consumer, but he need sleep, and he is OK
[2017-01-22 17:44:21,036] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueueTest.java:58) - consumer begin to consumer, but he need sleep, and he is OK
[2017-01-22 17:44:21,039] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueue.java:1060) - take happen
[2017-01-22 17:44:21,035] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueueTest.java:58) - consumer begin to consumer, but he need sleep, and he is OK
[2017-01-22 17:44:21,039] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:1060) - take happen
[2017-01-22 17:44:21,039] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueue.java:1060) - take happen
[2017-01-22 17:44:30,029] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueue.java:879) - after LockSupport.park(this)
[2017-01-22 17:44:30,029] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueue.java:893) - pred:QNode{, waiter=Thread[SynchronousQueueTest Thread :2,5,main], isData=false}, s :QNode{, waiter=Thread[SynchronousQueueTest Thread :0,5,main], isData=false}, pred.next == s:true
[2017-01-22 17:44:30,029] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueue.java:879) - after LockSupport.park(this)
[2017-01-22 17:44:30,030] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueue.java:893) - pred:QNode{, waiter=null, isData=false}, s :QNode{, waiter=Thread[SynchronousQueueTest Thread :1,5,main], isData=false}, pred.next == s:true
[2017-01-22 17:44:30,029] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:879) - after LockSupport.park(this)
[2017-01-22 17:44:30,030] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:893) - pred:QNode{, waiter=null, isData=false}, s :QNode{, waiter=Thread[SynchronousQueueTest Thread :2,5,main], isData=false}, pred.next == s:true
[2017-01-22 17:44:30,030] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueueTest.java:69) - end
[2017-01-22 17:44:30,030] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueueTest.java:69) - end
[2017-01-22 17:44:30,029] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueue.java:912) - t == h :false, t:QNode{, waiter=null, isData=false}, h:QNode{, waiter=null, isData=false}
[2017-01-22 17:44:30,031] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueue.java:924) - s != tfalse, s :QNode{, waiter=null, isData=false}, t : QNode{, waiter=null, isData=false}
[2017-01-22 17:44:30,031] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueue.java:933) - cleanMe :null
[2017-01-22 17:44:30,031] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueueTest.java:69) - end
[2017-01-22 17:48:19,186] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueueTest.java:56) - consumer begin to consumer, but he need sleep
[2017-01-22 17:48:19,187] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueueTest.java:56) - consumer begin to consumer, but he need sleep
[2017-01-22 17:48:19,187] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueueTest.java:56) - consumer begin to consumer, but he need sleep
[2017-01-22 17:48:20,190] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueueTest.java:58) - consumer begin to consumer, but he need sleep, and he is OK
[2017-01-22 17:48:20,190] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueue.java:1061) - take happen
[2017-01-22 17:48:20,190] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueueTest.java:58) - consumer begin to consumer, but he need sleep, and he is OK
[2017-01-22 17:48:20,190] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueue.java:1061) - take happen
[2017-01-22 17:48:20,218] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueueTest.java:58) - consumer begin to consumer, but he need sleep, and he is OK
[2017-01-22 17:48:20,219] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:1061) - take happen
[2017-01-22 17:48:29,185] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueue.java:879) - after LockSupport.park(this)
[2017-01-22 17:48:29,185] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:879) - after LockSupport.park(this)
[2017-01-22 17:48:29,185] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:893) - pred:QNode{, waiter=Thread[SynchronousQueueTest Thread :0,5,main], isData=false}, s :QNode{, waiter=Thread[SynchronousQueueTest Thread :2,5,main], isData=false}, pred.next == s:true
[2017-01-22 17:48:29,186] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:905) - pred.next == s:true
[2017-01-22 17:48:29,186] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:905) - pred.next == s:true
[2017-01-22 17:48:29,186] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:913) - t == h :false, t:QNode{, waiter=null, isData=false}, h:QNode{, waiter=Thread[SynchronousQueueTest Thread :1,5,main], isData=false}
[2017-01-22 17:48:29,186] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:925) - s != t : false, s :QNode{, waiter=null, isData=false}, t : QNode{, waiter=null, isData=false}
[2017-01-22 17:48:29,186] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:934) - cleanMe :null
[2017-01-22 17:48:29,185] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueue.java:879) - after LockSupport.park(this)
[2017-01-22 17:48:29,187] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueue.java:893) - pred:QNode{, waiter=Thread[SynchronousQueueTest Thread :1,5,main], isData=false}, s :QNode{, waiter=Thread[SynchronousQueueTest Thread :0,5,main], isData=false}, pred.next == s:true
[2017-01-22 17:48:29,186] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueueTest.java:69) - end
[2017-01-22 17:48:29,185] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueue.java:893) - pred:QNode{, waiter=null, isData=false}, s :QNode{, waiter=Thread[SynchronousQueueTest Thread :1,5,main], isData=false}, pred.next == s:true
[2017-01-22 17:48:29,187] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueueTest.java:69) - end
[2017-01-22 17:48:29,187] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueue.java:905) - pred.next == s:true
[2017-01-22 17:48:29,188] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueueTest.java:69) - end
[2017-01-22 17:50:17,063] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueueTest.java:57) - consumer begin to consumer, but he need sleep
[2017-01-22 17:50:17,063] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueueTest.java:57) - consumer begin to consumer, but he need sleep
[2017-01-22 17:50:17,063] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueueTest.java:57) - consumer begin to consumer, but he need sleep
[2017-01-22 17:50:18,066] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueueTest.java:59) - consumer begin to consumer, but he need sleep, and he is OK
[2017-01-22 17:50:18,066] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueueTest.java:59) - consumer begin to consumer, but he need sleep, and he is OK
[2017-01-22 17:50:18,066] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueue.java:1061) - take happen
[2017-01-22 17:50:18,066] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueueTest.java:59) - consumer begin to consumer, but he need sleep, and he is OK
[2017-01-22 17:50:18,066] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueue.java:1061) - take happen
[2017-01-22 17:50:18,066] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:1061) - take happen
[2017-01-22 17:50:30,063] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueue.java:879) - after LockSupport.park(this)
[2017-01-22 17:50:30,063] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueue.java:893) - pred:QNode{, waiter=Thread[SynchronousQueueTest Thread :1,5,main], isData=false}, s :QNode{, waiter=Thread[SynchronousQueueTest Thread :0,5,main], isData=false}, pred.next == s:true
[2017-01-22 17:50:30,063] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueue.java:905) - pred.next == s:true
[2017-01-22 17:50:30,063] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueue.java:913) - t == h :false, t:QNode{, waiter=Thread[SynchronousQueueTest Thread :2,5,main], isData=false}, h:QNode{, waiter=null, isData=false}
[2017-01-22 17:50:30,064] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueue.java:925) - s != t : true, s :QNode{, waiter=null, isData=false}, t : QNode{, waiter=Thread[SynchronousQueueTest Thread :2,5,main], isData=false}
[2017-01-22 17:50:30,064] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueueTest.java:70) - end
[2017-01-22 17:50:33,063] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueue.java:879) - after LockSupport.park(this)
[2017-01-22 17:50:33,063] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueue.java:893) - pred:QNode{, waiter=null, isData=false}, s :QNode{, waiter=Thread[SynchronousQueueTest Thread :1,5,main], isData=false}, pred.next == s:true
[2017-01-22 17:50:33,063] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueue.java:905) - pred.next == s:true
[2017-01-22 17:50:33,063] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueueTest.java:70) - end
[2017-01-22 17:50:36,063] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:879) - after LockSupport.park(this)
[2017-01-22 17:50:36,063] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:893) - pred:QNode{, waiter=null, isData=false}, s :QNode{, waiter=Thread[SynchronousQueueTest Thread :2,5,main], isData=false}, pred.next == s:true
[2017-01-22 17:50:36,063] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:905) - pred.next == s:true
[2017-01-22 17:50:36,063] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:905) - pred.next == s:true
[2017-01-22 17:50:36,063] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:913) - t == h :true, t:QNode{, waiter=null, isData=false}, h:QNode{, waiter=null, isData=false}
[2017-01-22 17:50:36,064] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueueTest.java:70) - end
[2017-01-22 17:54:55,931] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueueTest.java:57) - consumer begin to consumer, but he need sleep
[2017-01-22 17:54:55,931] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueueTest.java:57) - consumer begin to consumer, but he need sleep
[2017-01-22 17:54:55,931] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueueTest.java:57) - consumer begin to consumer, but he need sleep
[2017-01-22 17:54:56,934] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueueTest.java:59) - consumer begin to consumer, but he need sleep, and he is OK
[2017-01-22 17:54:56,934] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueue.java:1069) - take happen
[2017-01-22 17:54:56,934] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueueTest.java:59) - consumer begin to consumer, but he need sleep, and he is OK
[2017-01-22 17:54:56,935] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueueTest.java:59) - consumer begin to consumer, but he need sleep, and he is OK
[2017-01-22 17:54:56,935] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueue.java:1069) - take happen
[2017-01-22 17:54:56,935] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:1069) - take happen
[2017-01-22 17:55:08,931] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueue.java:879) - after LockSupport.park(this)
[2017-01-22 17:55:08,931] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueue.java:893) - pred:QNode{, waiter=Thread[SynchronousQueueTest Thread :1,5,main], isData=false}, s :QNode{, waiter=Thread[SynchronousQueueTest Thread :0,5,main], isData=false}, pred.next == s:true, Thread.getName:SynchronousQueueTest Thread :0
[2017-01-22 17:55:08,931] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueue.java:905) - pred.next == s:true, Thread.getName:SynchronousQueueTest Thread :0
[2017-01-22 17:55:08,931] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueue.java:914) - t == h :false, t:QNode{, waiter=Thread[SynchronousQueueTest Thread :2,5,main], isData=false}, h:QNode{, waiter=null, isData=false}, Thread.getName:SynchronousQueueTest Thread :0
[2017-01-22 17:55:08,932] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueue.java:929) - s != t : true, s :QNode{, waiter=null, isData=false}, t : QNode{, waiter=Thread[SynchronousQueueTest Thread :2,5,main], isData=false}, Thread.getName:SynchronousQueueTest Thread :0
[2017-01-22 17:55:08,932] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueue.java:934) - return :, Thread.getName:SynchronousQueueTest Thread :0
[2017-01-22 17:55:08,932] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueueTest.java:70) - end
[2017-01-22 17:55:11,931] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueue.java:879) - after LockSupport.park(this)
[2017-01-22 17:55:11,931] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueue.java:893) - pred:QNode{, waiter=null, isData=false}, s :QNode{, waiter=Thread[SynchronousQueueTest Thread :1,5,main], isData=false}, pred.next == s:true, Thread.getName:SynchronousQueueTest Thread :1
[2017-01-22 17:55:11,931] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueue.java:905) - pred.next == s:true, Thread.getName:SynchronousQueueTest Thread :1
[2017-01-22 17:55:11,931] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueue.java:910) - continue :, Thread.getName:SynchronousQueueTest Thread :1
[2017-01-22 17:55:11,932] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueueTest.java:70) - end
[2017-01-22 17:55:14,931] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:879) - after LockSupport.park(this)
[2017-01-22 17:55:14,931] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:893) - pred:QNode{, waiter=null, isData=false}, s :QNode{, waiter=Thread[SynchronousQueueTest Thread :2,5,main], isData=false}, pred.next == s:true, Thread.getName:SynchronousQueueTest Thread :2
[2017-01-22 17:55:14,931] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:905) - pred.next == s:true, Thread.getName:SynchronousQueueTest Thread :2
[2017-01-22 17:55:14,931] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:910) - continue :, Thread.getName:SynchronousQueueTest Thread :2
[2017-01-22 17:55:14,931] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:905) - pred.next == s:true, Thread.getName:SynchronousQueueTest Thread :2
[2017-01-22 17:55:14,931] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:914) - t == h :true, t:QNode{, waiter=null, isData=false}, h:QNode{, waiter=null, isData=false}, Thread.getName:SynchronousQueueTest Thread :2
[2017-01-22 17:55:14,932] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:916) - return :, Thread.getName:SynchronousQueueTest Thread :2
[2017-01-22 17:55:14,932] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueueTest.java:70) - end
[2017-01-22 18:00:25,957] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueueTest.java:57) - consumer begin to consumer, but he need sleep
[2017-01-22 18:00:25,959] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueueTest.java:57) - consumer begin to consumer, but he need sleep
[2017-01-22 18:00:25,963] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueueTest.java:57) - consumer begin to consumer, but he need sleep
[2017-01-22 18:00:26,959] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueueTest.java:59) - consumer begin to consumer, but he need sleep, and he is OK
[2017-01-22 18:00:26,959] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueue.java:1069) - take happen
[2017-01-22 18:00:26,962] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueueTest.java:59) - consumer begin to consumer, but he need sleep, and he is OK
[2017-01-22 18:00:26,962] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueue.java:1069) - take happen
[2017-01-22 18:00:26,979] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueueTest.java:59) - consumer begin to consumer, but he need sleep, and he is OK
[2017-01-22 18:00:26,979] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:1069) - take happen
[2017-01-22 18:00:38,959] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueue.java:879) - after LockSupport.park(this)
[2017-01-22 18:00:38,959] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueue.java:893) - pred:QNode{, waiter=Thread[SynchronousQueueTest Thread :1,5,main], isData=false}, s :QNode{, waiter=Thread[SynchronousQueueTest Thread :0,5,main], isData=false}, pred.next == s:true, Thread.getName:SynchronousQueueTest Thread :0
[2017-01-22 18:00:38,959] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueue.java:905) - pred.next == s:true, Thread.getName:SynchronousQueueTest Thread :0
[2017-01-22 18:00:38,959] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueue.java:914) - t == h :false, t:QNode{, waiter=Thread[SynchronousQueueTest Thread :2,5,main], isData=false}, h:QNode{, waiter=null, isData=false}, Thread.getName:SynchronousQueueTest Thread :0
[2017-01-22 18:00:38,960] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueue.java:929) - s != t : true, s :QNode{, waiter=null, isData=false}, t : QNode{, waiter=Thread[SynchronousQueueTest Thread :2,5,main], isData=false}, Thread.getName:SynchronousQueueTest Thread :0
[2017-01-22 18:00:38,960] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueue.java:934) - return :, Thread.getName:SynchronousQueueTest Thread :0
[2017-01-22 18:00:38,960] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueueTest.java:70) - end
[2017-01-22 18:00:41,959] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueue.java:879) - after LockSupport.park(this)
[2017-01-22 18:00:41,959] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueue.java:893) - pred:QNode{, waiter=null, isData=false}, s :QNode{, waiter=Thread[SynchronousQueueTest Thread :1,5,main], isData=false}, pred.next == s:true, Thread.getName:SynchronousQueueTest Thread :1
[2017-01-22 18:00:41,959] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueue.java:905) - pred.next == s:true, Thread.getName:SynchronousQueueTest Thread :1
[2017-01-22 18:00:41,959] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueue.java:910) - continue :, pred.next == s :false, Thread.getName:SynchronousQueueTest Thread :1
[2017-01-22 18:00:41,959] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueueTest.java:70) - end
[2017-01-22 18:00:44,959] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:879) - after LockSupport.park(this)
[2017-01-22 18:00:44,959] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:893) - pred:QNode{, waiter=null, isData=false}, s :QNode{, waiter=Thread[SynchronousQueueTest Thread :2,5,main], isData=false}, pred.next == s:true, Thread.getName:SynchronousQueueTest Thread :2
[2017-01-22 18:00:44,959] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:905) - pred.next == s:true, Thread.getName:SynchronousQueueTest Thread :2
[2017-01-22 18:00:44,959] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:910) - continue :, pred.next == s :true, Thread.getName:SynchronousQueueTest Thread :2
[2017-01-22 18:00:44,959] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:905) - pred.next == s:true, Thread.getName:SynchronousQueueTest Thread :2
[2017-01-22 18:00:44,959] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:914) - t == h :true, t:QNode{, waiter=null, isData=false}, h:QNode{, waiter=null, isData=false}, Thread.getName:SynchronousQueueTest Thread :2
[2017-01-22 18:00:44,960] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:916) - return :, Thread.getName:SynchronousQueueTest Thread :2
[2017-01-22 18:00:44,960] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueueTest.java:70) - end
[2017-01-22 18:04:09,463] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueueTest.java:57) - consumer begin to consumer, but he need sleep
[2017-01-22 18:04:09,466] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueueTest.java:57) - consumer begin to consumer, but he need sleep
[2017-01-22 18:04:09,466] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueueTest.java:57) - consumer begin to consumer, but he need sleep
[2017-01-22 18:04:10,465] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueueTest.java:59) - consumer begin to consumer, but he need sleep, and he is OK
[2017-01-22 18:04:10,467] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueue.java:1070) - take happen
[2017-01-22 18:04:10,466] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueueTest.java:59) - consumer begin to consumer, but he need sleep, and he is OK
[2017-01-22 18:04:10,476] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:1070) - take happen
[2017-01-22 18:04:10,476] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueueTest.java:59) - consumer begin to consumer, but he need sleep, and he is OK
[2017-01-22 18:04:10,476] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueue.java:1070) - take happen
[2017-01-22 18:04:22,465] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueue.java:879) - after LockSupport.park(this)
[2017-01-22 18:04:22,465] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueue.java:893) - pred:QNode{, waiter=Thread[SynchronousQueueTest Thread :2,5,main], isData=false}, s :QNode{, waiter=Thread[SynchronousQueueTest Thread :0,5,main], isData=false}, pred.next == s:true, Thread.getName:SynchronousQueueTest Thread :0
[2017-01-22 18:04:22,465] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueue.java:905) - pred.next == s:true, Thread.getName:SynchronousQueueTest Thread :0
[2017-01-22 18:04:22,465] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueue.java:908) - continue :, pred.next == s :true, Thread.getName:SynchronousQueueTest Thread :0
[2017-01-22 18:04:22,466] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueue.java:915) - t == h :false, t:QNode{, waiter=null, isData=false}, h:QNode{, waiter=null, isData=false}, Thread.getName:SynchronousQueueTest Thread :0
[2017-01-22 18:04:22,466] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueue.java:930) - s != t : false, s :QNode{, waiter=null, isData=false}, t : QNode{, waiter=null, isData=false}, Thread.getName:SynchronousQueueTest Thread :0
[2017-01-22 18:04:22,466] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueue.java:940) - cleanMe :null, Thread.getName:SynchronousQueueTest Thread :0
[2017-01-22 18:04:22,466] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueue.java:962) - continue :, Thread.getName:SynchronousQueueTest Thread :0
[2017-01-22 18:04:22,466] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueueTest.java:70) - end
[2017-01-22 18:04:25,465] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueue.java:879) - after LockSupport.park(this)
[2017-01-22 18:04:25,465] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueue.java:893) - pred:QNode{, waiter=null, isData=false}, s :QNode{, waiter=Thread[SynchronousQueueTest Thread :1,5,main], isData=false}, pred.next == s:true, Thread.getName:SynchronousQueueTest Thread :1
[2017-01-22 18:04:25,465] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueue.java:905) - pred.next == s:true, Thread.getName:SynchronousQueueTest Thread :1
[2017-01-22 18:04:25,465] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueue.java:908) - continue :, pred.next == s :true, Thread.getName:SynchronousQueueTest Thread :1
[2017-01-22 18:04:25,465] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueue.java:911) - continue :, pred.next == s :false, Thread.getName:SynchronousQueueTest Thread :1
[2017-01-22 18:04:25,465] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueueTest.java:70) - end
[2017-01-22 18:04:28,465] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:879) - after LockSupport.park(this)
[2017-01-22 18:04:28,465] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:893) - pred:QNode{, waiter=null, isData=false}, s :QNode{, waiter=Thread[SynchronousQueueTest Thread :2,5,main], isData=false}, pred.next == s:true, Thread.getName:SynchronousQueueTest Thread :2
[2017-01-22 18:04:28,465] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:905) - pred.next == s:true, Thread.getName:SynchronousQueueTest Thread :2
[2017-01-22 18:04:28,465] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:908) - continue :, pred.next == s :true, Thread.getName:SynchronousQueueTest Thread :2
[2017-01-22 18:04:28,465] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:911) - continue :, pred.next == s :false, Thread.getName:SynchronousQueueTest Thread :2
[2017-01-22 18:04:28,466] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueueTest.java:70) - end
[2017-01-22 18:06:01,332] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueueTest.java:57) - consumer begin to consumer, but he need sleep
[2017-01-22 18:06:01,334] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueueTest.java:57) - consumer begin to consumer, but he need sleep
[2017-01-22 18:06:01,337] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueueTest.java:57) - consumer begin to consumer, but he need sleep
[2017-01-22 18:06:02,334] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueueTest.java:59) - consumer begin to consumer, but he need sleep, and he is OK
[2017-01-22 18:06:02,334] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueue.java:1070) - take happen
[2017-01-22 18:06:02,336] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueueTest.java:59) - consumer begin to consumer, but he need sleep, and he is OK
[2017-01-22 18:06:02,337] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueue.java:1070) - take happen
[2017-01-22 18:06:02,343] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueueTest.java:59) - consumer begin to consumer, but he need sleep, and he is OK
[2017-01-22 18:06:02,348] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:1070) - take happen
[2017-01-22 18:06:14,335] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueue.java:879) - after LockSupport.park(this)
[2017-01-22 18:06:14,335] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueue.java:893) - pred:QNode{, waiter=null, isData=false}, s :QNode{, waiter=Thread[SynchronousQueueTest Thread :0,5,main], isData=false}, pred.next == s:true, Thread.getName:SynchronousQueueTest Thread :0
[2017-01-22 18:06:14,335] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueue.java:905) - pred.next == s:true, Thread.getName:SynchronousQueueTest Thread :0
[2017-01-22 18:06:14,335] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueue.java:908) - continue :, pred.next == s :true, Thread.getName:SynchronousQueueTest Thread :0
[2017-01-22 18:06:14,335] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueue.java:911) - continue :, pred.next == s :false(prev.next = prev) : true , Thread.getName:SynchronousQueueTest Thread :0
[2017-01-22 18:06:14,336] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueueTest.java:70) - end
[2017-01-22 18:06:17,335] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueue.java:879) - after LockSupport.park(this)
[2017-01-22 18:06:17,335] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueue.java:893) - pred:QNode{, waiter=null, isData=false}, s :QNode{, waiter=Thread[SynchronousQueueTest Thread :1,5,main], isData=false}, pred.next == s:true, Thread.getName:SynchronousQueueTest Thread :1
[2017-01-22 18:06:17,335] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueue.java:905) - pred.next == s:true, Thread.getName:SynchronousQueueTest Thread :1
[2017-01-22 18:06:17,335] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueue.java:908) - continue :, pred.next == s :true, Thread.getName:SynchronousQueueTest Thread :1
[2017-01-22 18:06:17,335] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueue.java:911) - continue :, pred.next == s :false(prev.next = prev) : true , Thread.getName:SynchronousQueueTest Thread :1
[2017-01-22 18:06:17,336] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueueTest.java:70) - end
[2017-01-22 18:06:20,335] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:879) - after LockSupport.park(this)
[2017-01-22 18:06:20,335] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:893) - pred:QNode{, waiter=null, isData=false}, s :QNode{, waiter=Thread[SynchronousQueueTest Thread :2,5,main], isData=false}, pred.next == s:true, Thread.getName:SynchronousQueueTest Thread :2
[2017-01-22 18:06:20,335] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:905) - pred.next == s:true, Thread.getName:SynchronousQueueTest Thread :2
[2017-01-22 18:06:20,335] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:908) - continue :, pred.next == s :true, Thread.getName:SynchronousQueueTest Thread :2
[2017-01-22 18:06:20,335] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:911) - continue :, pred.next == s :false(prev.next = prev) : true , Thread.getName:SynchronousQueueTest Thread :2
[2017-01-22 18:06:20,335] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueueTest.java:70) - end
[2017-01-22 18:07:40,725] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueueTest.java:57) - consumer begin to consumer, but he need sleep
[2017-01-22 18:07:40,727] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueueTest.java:57) - consumer begin to consumer, but he need sleep
[2017-01-22 18:07:40,733] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueueTest.java:57) - consumer begin to consumer, but he need sleep
[2017-01-22 18:07:41,729] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueueTest.java:59) - consumer begin to consumer, but he need sleep, and he is OK
[2017-01-22 18:07:41,729] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueue.java:1070) - take happen
[2017-01-22 18:07:41,774] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueueTest.java:59) - consumer begin to consumer, but he need sleep, and he is OK
[2017-01-22 18:07:41,787] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueue.java:1070) - take happen
[2017-01-22 18:07:41,789] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueueTest.java:59) - consumer begin to consumer, but he need sleep, and he is OK
[2017-01-22 18:07:41,791] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:1070) - take happen
[2017-01-22 18:07:50,727] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueue.java:879) - after LockSupport.park(this)
[2017-01-22 18:07:50,727] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueue.java:893) - pred:QNode{, waiter=null, isData=false}, s :QNode{, waiter=Thread[SynchronousQueueTest Thread :0,5,main], isData=false}, pred.next == s:true, Thread.getName:SynchronousQueueTest Thread :0
[2017-01-22 18:07:50,727] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueue.java:905) - pred.next == s:true, Thread.getName:SynchronousQueueTest Thread :0
[2017-01-22 18:07:50,727] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:879) - after LockSupport.park(this)
[2017-01-22 18:07:50,727] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueue.java:879) - after LockSupport.park(this)
[2017-01-22 18:07:50,727] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:893) - pred:QNode{, waiter=Thread[SynchronousQueueTest Thread :1,5,main], isData=false}, s :QNode{, waiter=Thread[SynchronousQueueTest Thread :2,5,main], isData=false}, pred.next == s:true, Thread.getName:SynchronousQueueTest Thread :2
[2017-01-22 18:07:50,727] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueue.java:908) - continue :, pred.next == s :true, Thread.getName:SynchronousQueueTest Thread :0
[2017-01-22 18:07:50,728] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueue.java:911) - continue :, pred.next == s :false(prev.next = prev) : true , Thread.getName:SynchronousQueueTest Thread :0
[2017-01-22 18:07:50,728] INFO  SynchronousQueueTest Thread :0 (KSynchronousQueueTest.java:70) - end
[2017-01-22 18:07:50,728] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:905) - pred.next == s:true, Thread.getName:SynchronousQueueTest Thread :2
[2017-01-22 18:07:50,728] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueue.java:893) - pred:QNode{, waiter=null, isData=false}, s :QNode{, waiter=Thread[SynchronousQueueTest Thread :1,5,main], isData=false}, pred.next == s:true, Thread.getName:SynchronousQueueTest Thread :1
[2017-01-22 18:07:50,728] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:908) - continue :, pred.next == s :true, Thread.getName:SynchronousQueueTest Thread :2
[2017-01-22 18:07:50,729] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueue.java:905) - pred.next == s:true, Thread.getName:SynchronousQueueTest Thread :1
[2017-01-22 18:07:50,729] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:911) - continue :, pred.next == s :true(prev.next = prev) : false , Thread.getName:SynchronousQueueTest Thread :2
[2017-01-22 18:07:50,729] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueue.java:908) - continue :, pred.next == s :false, Thread.getName:SynchronousQueueTest Thread :1
[2017-01-22 18:07:50,729] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:905) - pred.next == s:true, Thread.getName:SynchronousQueueTest Thread :2
[2017-01-22 18:07:50,729] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueue.java:911) - continue :, pred.next == s :false(prev.next = prev) : true , Thread.getName:SynchronousQueueTest Thread :1
[2017-01-22 18:07:50,729] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:908) - continue :, pred.next == s :false, Thread.getName:SynchronousQueueTest Thread :2
[2017-01-22 18:07:50,729] INFO  SynchronousQueueTest Thread :1 (KSynchronousQueueTest.java:70) - end
[2017-01-22 18:07:50,730] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:915) - t == h :true, t:QNode{, waiter=null, isData=false}, h:QNode{, waiter=null, isData=false}, Thread.getName:SynchronousQueueTest Thread :2
[2017-01-22 18:07:50,730] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueue.java:917) - return :, Thread.getName:SynchronousQueueTest Thread :2
[2017-01-22 18:07:50,730] INFO  SynchronousQueueTest Thread :2 (KSynchronousQueueTest.java:70) - end
